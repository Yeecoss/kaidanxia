///////////////////////////////////components\wxs\array.wxs/////////////////////////////////
function isArray(array) {
  return array && array.constructor === 'Array';
}

///////////////////////////////////components\wxs\object.wxs/////////////////////////////////
var REGEXP = getRegExp('{|}|"', 'g');

function keys(obj) {
  return JSON.stringify(obj).replace(REGEXP, '').split(',').map(function (item) {
    return item.split(':')[0];
  });
}

var PREFIX = 'van-';

function join(name, mods) {
  name = PREFIX + name;
  mods = mods.map(function (mod) {
    return name + '--' + mod;
  });
  mods.unshift(name);
  return mods.join(' ');
}

function traversing(mods, conf) {
  if (!conf) {
    return;
  }

  if (typeof conf === 'string' || typeof conf === 'number') {
    mods.push(conf);
  } else if (isArray(conf)) {
    conf.forEach(function (item) {
      traversing(mods, item);
    });
  } else if (typeof conf === 'object') {
    keys(conf).forEach(function (key) {
      conf[key] && mods.push(key);
    });
  }
}

function bem(name, conf) {
  var mods = [];
  traversing(mods, conf);
  return join(name, mods);
}

///////////////////////////////////components\wxs\memoize.wxs/////////////////////////////////
function isPrimitive(value) {
  var type = typeof value;
  return type === 'boolean' || type === 'number' || type === 'string' || type === 'undefined' || value === null;
} // mock simple fn.call in wxs


function call(fn, args) {
  if (args.length === 2) {
    return fn(args[0], args[1]);
  }

  if (args.length === 1) {
    return fn(args[0]);
  }

  return fn();
}

function serializer(args) {
  if (args.length === 1 && isPrimitive(args[0])) {
    return args[0];
  }

  var obj = {};

  for (var i = 0; i < args.length; i++) {
    obj['key' + i] = args[i];
  }

  return JSON.stringify(obj);
}

function memoize(fn) {
  var cache = {};
  return function () {
    var key = serializer(arguments);

    if (cache[key] === undefined) {
      cache[key] = call(fn, arguments);
    }

    return cache[key];
  };
}

function isSrc(url) {
  return url.indexOf('http') === 0 || url.indexOf('data:image') === 0 || url.indexOf('//') === 0;
}

module.exports = {
  bem: memoize(bem),
  isSrc: isSrc,
  memoize: memoize
};